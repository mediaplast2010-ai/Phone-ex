# app.py
# Phone Extractor UA ‚Äî –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–ª—ñ–∫—ñ–≤ –Ω–∞ "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä"

import streamlit as st
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import re
import time
from urllib.parse import urlparse

st.set_page_config(page_title="üìû Phone Extractor Pro", layout="centered")
st.title("üìû Phone Extractor Pro")
st.markdown("üîç –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏")

# --- –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É ---
mode = st.radio(
    "–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏",
    ["üü¢ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º (requests)", "üü° –†–µ–∂–∏–º –∑ –∫–ª—ñ–∫–∞–º–∏ (Selenium)"],
    help="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Selenium, —è–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É"
)

urls_input = st.text_area(
    "–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤",
    placeholder="https://okna.ua\nhttps://budzmo.ua",
    height=150
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
delay = st.sidebar.slider("–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∞–π—Ç–∞–º–∏ (—Å–µ–∫)", 1, 10, 3)
show_raw = st.sidebar.checkbox("–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–∏—Ä—ñ –¥–∞–Ω—ñ")

if st.button("üîç –ó–Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏"):
    if not urls_input.strip():
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω URL")
    else:
        url_list = [url.strip() for url in urls_input.splitlines() if url.strip()]
        all_phones = {}
        failed_sites = []

        if mode == "üü¢ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º (requests)":
            # === –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º ===
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html',
                'Accept-Language': 'uk',
            }

            for url in url_list:
                if not url.startswith("http"):
                    url = "https://" + url

                try:
                    response = requests.get(url, headers=headers, timeout=15)
                    response.raise_for_status()
                    response.encoding = response.apparent_encoding
                    soup = BeautifulSoup(response.text, 'html.parser')
                    text = soup.get_text() + str(soup)

                    phones = set()

                    # –ü–æ—à—É–∫ —É tel: –ø–æ—Å–∏–ª–∞–Ω–Ω—è—Ö
                    tel_links = soup.find_all(href=lambda x: x and x.startswith("tel:"))
                    for link in tel_links:
                        tel = link['href'].replace("tel:", "").strip()
                        digits = re.sub(r'[^\d]', '', tel)
                        if len(digits) == 12 and digits.startswith('380'):
                            phones.add('+' + digits)
                        elif len(digits) == 10 and digits.startswith('0'):
                            phones.add('+38' + digits)
                        elif len(digits) == 9 and digits.startswith('800'):
                            phones.add('+380' + digits)
                        elif len(digits) == 9 and digits.startswith('0'):
                            phones.add('+380' + digits)

                    # –ü–æ—à—É–∫ —É —Ç–µ–∫—Å—Ç—ñ
                    patterns = [
                        r'\+?38\s*\(?\d{3}\)?\s*\d{3}[-.\s]?\d{2}[-.\s]?\d{2}',
                        r'0\s*\(?\d{2,3}\)?\s*\d{3}[-.\s]?\d{2}[-.\s]?\d{2}',
                        r'800[-.\s]?\d{3}[-.\s]?\d{3}',
                    ]
                    for pattern in patterns:
                        matches = re.finditer(pattern, text, re.IGNORECASE)
                        for match in matches:
                            full = match.group(0)
                            digits = re.sub(r'[^\d]', '', full)
                            if len(digits) == 12 and digits.startswith('380'):
                                phones.add('+' + digits)
                            elif len(digits) == 10 and digits.startswith('0'):
                                phones.add('+38' + digits)
                            elif len(digits) == 9 and digits.startswith('800'):
                                phones.add('+380' + digits)

                    phones = sorted(phones)
                    domain = urlparse(url).netloc
                    all_phones[domain] = phones

                    if show_raw:
                        with st.expander(f"üìÑ –°–∏—Ä—ñ –¥–∞–Ω—ñ: {domain}"):
                            st.text_area("HTML", response.text[:2000], height=200, key=f"raw_{url}")

                except Exception as e:
                    failed_sites.append(f"{url} ‚Äî {str(e)}")

                time.sleep(delay)

        else:
            # === –†–µ–∂–∏–º –∑ –∫–ª—ñ–∫–∞–º–∏ (Selenium) ===
            with st.spinner("–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞..."):
                chrome_options = Options()
                chrome_options.add_argument("--headless")
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument("--disable-dev-shm-usage")
                chrome_options.add_argument("--window-size=1920,1080")
                chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

                try:
                    service = Service(ChromeDriverManager().install())
                    driver = webdriver.Chrome(service=service, options=chrome_options)
                except Exception as e:
                    st.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Chrome: {e}")
                    st.stop()

            CLICK_TEXTS = [
                "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", "–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä", "–ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä",
                "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä", "–ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä",
                "–î–∏–≤–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä", "–°–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä",
                "–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"
            ]

            for url in url_list:
                if not url.startswith("http"):
                    url = "https://" + url

                try:
                    driver.get(url)
                    time.sleep(3)

                    # –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
                    for text in CLICK_TEXTS:
                        try:
                            buttons = driver.find_elements(By.XPATH, f"//*[contains(text(), '{text}')]")
                            for btn in buttons:
                                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
                                driver.execute_script("arguments[0].click();", btn)
                                time.sleep(1.5)
                        except:
                            continue

                    time.sleep(3)
                    html = driver.page_source
                    soup = BeautifulSoup(html, 'html.parser')
                    text = soup.get_text() + html

                    phones = set()
                    # (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –ø–æ—à—É–∫, —è–∫ –≤–∏—â–µ)
                    tel_links = soup.find_all(href=lambda x: x and x.startswith("tel:"))
                    for link in tel_links:
                        tel = link['href'].replace("tel:", "").strip()
                        digits = re.sub(r'[^\d]', '', tel)
                        if len(digits) == 12 and digits.startswith('380'):
                            phones.add('+' + digits)
                        elif len(digits) == 10 and digits.startswith('0'):
                            phones.add('+38' + digits)
                        elif len(digits) == 9 and digits.startswith('800'):
                            phones.add('+380' + digits)

                    # –ü–æ—à—É–∫ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏
                    patterns = [r'\+?38\s*\(?\d{3}\)?\s*\d{3}[-.\s]?\d{2}[-.\s]?\d{2}', r'800[-.\s]?\d{3}[-.\s]?\d{3}']
                    for pattern in patterns:
                        matches = re.finditer(pattern, text, re.IGNORECASE)
                        for match in matches:
                            full = match.group(0)
                            digits = re.sub(r'[^\d]', '', full)
                            if len(digits) == 12 and digits.startswith('380'):
                                phones.add('+' + digits)
                            elif len(digits) == 9 and digits.startswith('800'):
                                phones.add('+380' + digits)

                    phones = sorted(phones)
                    domain = urlparse(url).netloc
                    all_phones[domain] = phones

                    if show_raw:
                        with st.expander(f"üìÑ –°–∏—Ä—ñ –¥–∞–Ω—ñ (Selenium): {domain}"):
                            st.text_area("HTML", html[:2000], height=200, key=f"selenium_{url}")

                except Exception as e:
                    failed_sites.append(f"{url} ‚Äî {str(e)}")

                time.sleep(delay)

            driver.quit()

        # === –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ===
        if all_phones:
            st.success("üìû –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏:")
            full_output = ""
            for domain, phones in all_phones.items():
                if phones:
                    st.markdown(f"### üåê `{domain}`")
                    for phone in phones:
                        st.code(phone)
                    full_output += f"{domain}\n" + "\n".join(phones) + "\n\n"
                else:
                    st.info(f"‚ÑπÔ∏è –ù–∞ `{domain}` —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    full_output += f"{domain}\n(–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)\n\n"

            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                data=full_output.strip(),
                file_name="phones_extracted.txt",
                mime="text/plain"
            )
        else:
            st.warning("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∂–æ–¥–Ω–æ–º—É —Å–∞–π—Ç—ñ.")

        if failed_sites:
            st.error("‚ùå –ü–æ–º–∏–ª–∫–∏:")
            for fail in failed_sites:
                st.markdown(f"- `{fail}`")

st.markdown("---")
st.markdown(
    "üí° <small>–†–µ–∂–∏–º –∑ –∫–ª—ñ–∫–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω, —è–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∑–∞ –∫–Ω–æ–ø–∫–∞–º–∏. –ü—Ä–∞—Ü—é—î –ª–æ–∫–∞–ª—å–Ω–æ.</small>",
    unsafe_allow_html=True
)if __name__ == '__main__':
    import os
    os.system('streamlit run app.py --server.address=0.0.0.0 --server.port=$PORT')