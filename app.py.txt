# app.py
# Phone Extractor –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é JavaScript (Selenium)

import streamlit as st
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import re
import time
from urllib.parse import urlparse
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Streamlit
st.set_page_config(page_title="üìû Phone Extractor –û–Ω–ª–∞–π–Ω", layout="centered")
st.title("üìû Phone Extractor")
st.markdown("–í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ URL ‚Äî –∑–Ω–∞–π–¥–µ–º–æ —É—Å—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∏ (–≤–∫–ª—é—á–∞—é—á–∏ JS-—Å–∞–π—Ç–∏)")

# –ü–æ–ª–µ –≤–≤–æ–¥—É
urls_input = st.text_area(
    "–°–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤",
    placeholder="https://idcompass.com\nhttps://example.com",
    height=150
)

if st.button("üîç –ó–Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏"):
    if not urls_input.strip():
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω URL")
    else:
        url_list = [url.strip() for url in urls_input.splitlines() if url.strip()]
        total_urls = len(url_list)
        st.info(f"–û–±—Ä–æ–±–ª—è—î–º–æ {total_urls} —Å–∞–π—Ç—ñ–≤...")

        all_phones = {}
        failed_sites = []
        progress_bar = st.progress(0)
        status_text = st.empty()

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Selenium (–±–µ–∑–≥–æ–ª–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º)
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

        driver = None
        try:
            driver = webdriver.Chrome(options=chrome_options)
        except:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Chrome. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥.")
            st.stop()

        for i, url in enumerate(url_list):
            status_text.text(f"–û–±—Ä–æ–±–ª—è—î–º–æ: {url}")
            progress_bar.progress((i + 1) / total_urls)

            if not url.startswith("http"):
                url = "https://" + url

            try:
                driver.get(url)
                # –ß–µ–∫–∞—î–º–æ, —â–æ–± —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                time.sleep(3)  # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è JS

                # –û—Ç—Ä–∏–º—É—î–º–æ HTML –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è JS
                html = driver.page_source
                soup = BeautifulSoup(html, 'html.parser')
                text = soup.get_text()

                # –ü–æ—à—É–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
                phone_pattern = r'(\+\d{1,3}[-.\s]?)?\(?(\d{3})\)?[-.\s]?(\d{3})[-.\s]?(\d{4})'
                matches = re.findall(phone_pattern, text)
                phones = set()
                for match in matches:
                    phone = ''.join(match)
                    if f"+{phone}" in text or str(match[0]).startswith('+'):
                        phone = '+' + phone
                    phones.add(phone)

                phones = sorted(phones)
                domain = urlparse(url).netloc or "unknown"
                all_phones[domain] = phones

            except Exception as e:
                failed_sites.append(f"{url} ‚Äî –ø–æ–º–∏–ª–∫–∞: {str(e)}")

        driver.quit()
        status_text.text("–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        progress_bar.progress(100)

        # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if all_phones:
            st.success("‚úÖ –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏:")
            full_output = ""
            for domain, phones in all_phones.items():
                if phones:
                    st.markdown(f"### üåê `{domain}`")
                    for phone in phones:
                        st.code(phone)
                    full_output += f"{domain}\n" + "\n".join(phones) + "\n\n"
                else:
                    st.info(f"‚ÑπÔ∏è –ù–∞ `{domain}` —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    full_output += f"{domain}\n(–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)\n\n"

            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫ .txt",
                data=full_output.strip(),
                file_name="phone_extractor_results.txt",
                mime="text/plain"
            )
        else:
            st.warning("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∂–æ–¥–Ω–æ–º—É —Å–∞–π—Ç—ñ.")

        if failed_sites:
            st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏:")
            for fail in failed_sites:
                st.markdown(f"- `{fail}`")

st.markdown("---")
st.markdown(
    "üí° <small>–î–æ–¥–∞—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Selenium –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ JS. –ü—Ä–∞—Ü—é—î –Ω–∞ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Å–∞–π—Ç—ñ–≤.</small>",
    unsafe_allow_html=True
)